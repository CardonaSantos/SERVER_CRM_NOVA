////////////////////////////////////////////////////////////////////////////////
// üìë √çNDICE R√ÅPIDO (Ctrl/Cmd+F ‚Üí ‚Äú[nn]‚Äù)
//   [01] ENTIDADES BASE: Empresa, Usuario, ConfiguracionGlobal, Saldos, Proveedor
//   [02] GEOGRAF√çA/UBICACIONES/ZONAS: Departamento, Municipio, Sector, Ubicacion, FacturacionZona
//   [03] PLANTILLAS Y COMUNICACIONES: PlantillaMensaje, PlantillaContrato
//   [04] SERVICIOS (Cat√°logos y asignaciones): TipoServicio, Servicio, ServicioInternet
//   [05] CLIENTES Y CONTRATOS: ClienteInternet, IP, Fotos, saldoCliente, ContratoFisico,
//                               ContratoServicioInternet, ClienteServicio, Lead
//   [06] FACTURACI√ìN Y PAGOS: FacturaInternet, Factura, FacturaServicio,
//                              PagoFacturaInternet, PagoFactura, RecordatorioPago, FacturaEliminada
//   [07] RUTAS DE COBRO: Ruta, RutaTurno, FacturaRuta, CobroRuta
//   [08] SOPORTE Y METAS: TicketSoporte, BoletaSoporte, EtiquetaTicket, TicketEtiqueta,
//                          SeguimientoTicket, TicketSoporteTecnico, MetaTecnicoTicket,
//                          MetaTickets, Asistencia
//   [09] ENUMS: Todos los enums agrupados
//
//  ‚Üí ir a [01] ENTIDADES BASE
//  ‚Üí ir a [02] GEOGRAF√çA/UBICACIONES/ZONAS
//  ‚Üí ir a [03] PLANTILLAS Y COMUNICACIONES
//  ‚Üí ir a [04] SERVICIOS
//  ‚Üí ir a [05] CLIENTES Y CONTRATOS
//  ‚Üí ir a [06] FACTURACI√ìN Y PAGOS
//  ‚Üí ir a [07] RUTAS DE COBRO
//  ‚Üí ir a [08] SOPORTE Y METAS
//  ‚Üí ir a [09] ENUMS
////////////////////////////////////////////////////////////////////////////////

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_CRM")
}

////////////////////////////////////////////////////////////////////////////////
// [01] üß± ENTIDADES BASE: Empresa, Usuarios, Configuraci√≥n, Saldos, Proveedores
////////////////////////////////////////////////////////////////////////////////

model Empresa {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @unique
  direccion           String?
  telefono            String?
  pbx                 String?
  correo              String?
  sitioWeb            String?
  nit                 String?
  logo1               String?
  logo2               String?
  logo3               String?
  creadoEn            DateTime              @default(now())
  actualizadoEn       DateTime              @updatedAt
  clientesInternet    ClienteInternet[]
  ConfiguracionGlobal ConfiguracionGlobal[]
  Factura             Factura[]
  facturas            FacturaInternet[]
  FacturacionZona     FacturacionZona[]
  plantillas          PlantillaMensaje[]
  Proveedor           Proveedor[]
  rutas               Ruta[]
  saldoCaja           SaldoCaja?
  saldoEmpresa        SaldoEmpresa?
  Servicio            Servicio[]
  ServicioInternet    ServicioInternet[]
  TicketSoporte       TicketSoporte[]
  Ubicacion           Ubicacion[]
  empleados           Usuario[]
}

model Usuario {
  id                     Int                    @id @default(autoincrement())
  empresaId              Int
  nombre                 String
  correo                 String                 @unique
  telefono               String?
  rol                    RolUsuario
  activo                 Boolean                @default(true)
  creadoEn               DateTime               @default(now())
  actualizadoEn          DateTime               @updatedAt
  contrasena             String
  asistencias            Asistencia[]           @relation("UsuarioAsistencias")
  BoletaSoporte          BoletaSoporte[]
  clientesAsesorados     ClienteInternet[]
  facturasEliminadas     FacturaEliminada[]
  facturasCreadas        FacturaInternet[]      @relation("FacturaInternetCreador")
  metasTecnico           MetaTecnicoTicket[]    @relation("MetaTecnicoRelation")
  MetaTickets            MetaTickets[]
  PagoFacturaInternet    PagoFacturaInternet[]
  RegistroCaja           RegistroCaja[]
  Ruta                   Ruta[]
  SeguimientoTicket      SeguimientoTicket[]
  ticketsCreados         TicketSoporte[]        @relation("TicketCreador")
  ticketsAsignados       TicketSoporte[]        @relation("TicketTecnico")
  ticketsSoporteTecnico  TicketSoporteTecnico[]
  empresa                Empresa                @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  facturasAsignadas      FacturaRuta[]          @relation("AsignadorFacturaRuta")
  facturasCobradas       FacturaRuta[]          @relation("CobradorFacturaRuta")
  rutaTurnosComoCobrador RutaTurno[]
}

model ConfiguracionGlobal {
  id            Int      @id @default(autoincrement())
  empresaId     Int
  clave         String   @unique
  valor         String
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  empresa       Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model SaldoEmpresa {
  id            Int      @id @default(autoincrement())
  saldo         Float    @default(0)
  egresos       Float    @default(0)
  totalIngresos Float
  empresaId     Int      @unique
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  empresa       Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model SaldoCaja {
  id            Int            @id @default(autoincrement())
  saldo         Float          @default(0)
  egreso        Float          @default(0)
  totalIngresos Float
  totalEgresos  Float
  empresaId     Int            @unique
  creadoEn      DateTime       @default(now())
  actualizadoEn DateTime       @updatedAt
  registrosCaja RegistroCaja[]
  empresa       Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model RegistroCaja {
  id            Int        @id @default(autoincrement())
  saldoInicial  Float
  saldoFinal    Float
  usuarioId     Int?
  cajaId        Int?
  creadoEn      DateTime   @default(now())
  actualizadoEn DateTime   @updatedAt
  caja          SaldoCaja? @relation(fields: [cajaId], references: [id])
  usuario       Usuario?   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Proveedor {
  id        Int     @id @default(autoincrement())
  nombre    String
  correo    String?
  telefono  String?
  direccion String?
  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

////////////////////////////////////////////////////////////////////////////////
// [02] üåê GEOGRAF√çA/UBICACIONES/ZONAS
////////////////////////////////////////////////////////////////////////////////

model Departamento {
  id         Int               @id @default(autoincrement())
  nombre     String            @unique
  clientes   ClienteInternet[]
  municipios Municipio[]
}

model Municipio {
  id             Int               @id @default(autoincrement())
  nombre         String            @unique
  departamentoId Int
  clientes       ClienteInternet[]
  departamento   Departamento      @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  Sector         Sector[]
}

model Sector {
  id            Int               @id @default(autoincrement())
  nombre        String
  descripcion   String?
  municipioId   Int
  creadoEn      DateTime          @default(now())
  actualizadoEn DateTime          @updatedAt
  clientes      ClienteInternet[]
  municipio     Municipio         @relation(fields: [municipioId], references: [id], onDelete: Cascade)
}

model Ubicacion {
  id        Int              @id @default(autoincrement())
  creadoEn  DateTime         @default(now())
  latitud   Float?
  longitud  Float?
  clienteId Int?             @unique
  empresaId Int
  cliente   ClienteInternet? @relation(fields: [clienteId], references: [id])
  empresa   Empresa          @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model FacturacionZona {
  id                            Int               @id @default(autoincrement())
  nombre                        String
  empresaId                     Int
  diaGeneracionFactura          Int
  diaPago                       Int
  diaRecordatorio               Int?
  horaRecordatorio              String?
  enviarRecordatorio            Boolean           @default(true)
  diaCorte                      Int?
  suspenderTrasFacturas         Int?
  creadoEn                      DateTime          @default(now())
  actualizadoEn                 DateTime          @updatedAt
  diaSegundoRecordatorio        Int?
  email                         Boolean           @default(false)
  llamada                       Boolean           @default(false)
  sms                           Boolean           @default(false)
  telegram                      Boolean           @default(true)
  whatsapp                      Boolean           @default(true)
  enviarAvisoPago               Boolean           @default(true)
  enviarRecordatorio1           Boolean           @default(true)
  enviarRecordatorio2           Boolean           @default(true)
  enviarRecordatorioGeneracion  Boolean           @default(true)
  enviarSiTieneFacturasVencidas Boolean           @default(false)
  clientes                      ClienteInternet[]
  facturas                      FacturaInternet[]
  empresa                       Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

////////////////////////////////////////////////////////////////////////////////
// [03] üßæ PLANTILLAS Y COMUNICACIONES
////////////////////////////////////////////////////////////////////////////////

model PlantillaMensaje {
  id            Int           @id @default(autoincrement())
  nombre        String
  tipo          TipoPlantilla
  body          String
  empresaId     Int
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
  empresa       Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

model PlantillaContrato {
  id            Int      @id @default(autoincrement())
  nombre        String
  body          String
  empresaId     Int
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}

////////////////////////////////////////////////////////////////////////////////
// [04] üß∞ SERVICIOS (Cat√°logos y asignaciones)
////////////////////////////////////////////////////////////////////////////////

model TipoServicio {
  id            Int            @id @default(autoincrement())
  nombre        String         @unique
  descripcion   String?
  estado        EstadoServicio @default(ACTIVO)
  creadoEn      DateTime       @default(now())
  actualizadoEn DateTime       @updatedAt
  servicios     Servicio[]
}

model Servicio {
  id              Int               @id @default(autoincrement())
  nombre          String
  descripcion     String?
  precio          Float
  estado          EstadoServicio    @default(ACTIVO)
  tipoServicioId  Int?
  empresaId       Int
  creadoEn        DateTime          @default(now())
  actualizadoEn   DateTime          @updatedAt
  clientes        ClienteServicio[]
  FacturaServicio FacturaServicio[]
  empresa         Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  tipoServicio    TipoServicio?     @relation(fields: [tipoServicioId], references: [id], onDelete: Restrict)
}

model ServicioInternet {
  id            Int               @id @default(autoincrement())
  nombre        String
  velocidad     String?
  precio        Float
  estado        EstadoServicio    @default(ACTIVO)
  creadoEn      DateTime          @default(now())
  actualizadoEn DateTime          @updatedAt
  empresaId     Int
  clientes      ClienteInternet[]
  empresa       Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

////////////////////////////////////////////////////////////////////////////////
// [05] üë§ CLIENTES Y SUS ATRIBUTOS/CONTRATOS
////////////////////////////////////////////////////////////////////////////////

model ClienteInternet {
  id                         Int                       @id @default(autoincrement())
  nombre                     String
  apellidos                  String?
  telefono                   String?
  direccion                  String?
  dpi                        String?
  observaciones              String?
  contactoReferenciaNombre   String?
  contactoReferenciaTelefono String?
  estadoCliente              EstadoCliente
  contrasenaWifi             String?
  ssidRouter                 String?
  fechaInstalacion           DateTime?
  asesorId                   Int?
  municipioId                Int?
  departamentoId             Int?
  empresaId                  Int?
  creadoEn                   DateTime                  @default(now())
  actualizadoEn              DateTime                  @updatedAt
  facturacionZonaId          Int?
  servicioInternetId         Int?
  sectorId                   Int?
  asesor                     Usuario?                  @relation(fields: [asesorId], references: [id])
  departamento               Departamento?             @relation(fields: [departamentoId], references: [id])
  empresa                    Empresa?                  @relation(fields: [empresaId], references: [id])
  facturacionZona            FacturacionZona?          @relation(fields: [facturacionZonaId], references: [id])
  municipio                  Municipio?                @relation(fields: [municipioId], references: [id])
  sector                     Sector?                   @relation(fields: [sectorId], references: [id])
  servicioInternet           ServicioInternet?         @relation(fields: [servicioInternetId], references: [id])
  clienteServicios           ClienteServicio[]
  CobroRuta                  CobroRuta[]
  ContratoFisico             ContratoFisico?
  ContratoServicioInternet   ContratoServicioInternet? @relation("ContratoCliente")
  factura                    Factura[]
  facturaInternet            FacturaInternet[]
  fotos                      Fotos[]
  IP                         IP?
  Lead                       Lead[]
  pagoFactura                PagoFactura[]
  PagoFacturaInternet        PagoFacturaInternet[]
  RecordatorioPago           RecordatorioPago[]
  ticketSoporte              TicketSoporte[]
  ubicacion                  Ubicacion?
  saldoCliente               saldoCliente?
  ruta                       Ruta[]                    @relation("ClienteInternetToRuta")
  nota                       String?
}

model IP {
  id          Int              @id @default(autoincrement())
  direccionIp String?          @default("192.168.1.1")
  clienteId   Int?             @unique
  gateway     String?          @default("192.168.1.1")
  mascara     String?          @default("255.255.255.0")
  cliente     ClienteInternet? @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model Fotos {
  id            Int             @id @default(autoincrement())
  nombreFoto    String
  url           String?
  clienteId     Int
  creadoEn      DateTime        @default(now())
  actualizadoEn DateTime        @updatedAt
  cliente       ClienteInternet @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model saldoCliente {
  id             Int             @id @default(autoincrement())
  saldoPendiente Float?          @default(0)
  saldoFavor     Float?          @default(0)
  totalPagos     Float?          @default(0)
  clienteId      Int             @unique
  creadoEn       DateTime        @default(now())
  actualizadoEn  DateTime        @updatedAt
  ultimoPago     DateTime?
  cliente        ClienteInternet @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model ContratoFisico {
  id              Int              @id @default(autoincrement())
  clienteId       Int?             @unique
  idContrato      String           @unique
  fechaFirma      DateTime?        @default(now())
  archivoContrato String?
  creadoEn        DateTime?        @default(now())
  actualizadoEn   DateTime         @updatedAt
  observaciones   String?
  cliente         ClienteInternet? @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model ContratoServicioInternet {
  id                         Int             @id @default(autoincrement())
  clienteId                  Int             @unique
  creadoEn                   DateTime        @default(now())
  actualizadoEn              DateTime        @updatedAt
  costoInstalacion           Float?
  fechaInstalacionProgramada DateTime?
  fechaPago                  DateTime?
  observaciones              String?
  cliente                    ClienteInternet @relation("ContratoCliente", fields: [clienteId], references: [id], onDelete: Cascade)
}

model ClienteServicio {
  id            Int                   @id @default(autoincrement())
  clienteId     Int
  servicioId    Int
  fechaInicio   DateTime              @default(now())
  fechaFin      DateTime?
  estado        EstadoClienteServicio @default(ACTIVO)
  creadoEn      DateTime              @default(now())
  actualizadoEn DateTime              @updatedAt
  cliente       ClienteInternet       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  servicio      Servicio              @relation(fields: [servicioId], references: [id], onDelete: Cascade)
}

model Lead {
  id        Int              @id @default(autoincrement())
  nombre    String
  correo    String?
  telefono  String?
  fuente    String
  estado    String
  creadoEn  DateTime         @default(now())
  clienteId Int?
  cliente   ClienteInternet? @relation(fields: [clienteId], references: [id])
}

////////////////////////////////////////////////////////////////////////////////
// [06] üí∏ FACTURACI√ìN Y PAGOS
////////////////////////////////////////////////////////////////////////////////

model FacturaInternet {
  id                    Int                   @id @default(autoincrement())
  fechaPagoEsperada     DateTime?
  fechaPagada           DateTime?
  montoPago             Float?
  saldoPendiente        Float?                @default(0)
  empresaId             Int
  clienteId             Int
  creadoEn              DateTime              @default(now())
  actualizadoEn         DateTime              @updatedAt
  detalleFactura        String?
  nombreClienteFactura  String?
  facturacionZonaId     Int?
  estadoFacturaInternet StateFacturaInternet  @default(PENDIENTE)
  creadorId             Int?
  periodo               String                @db.VarChar(6)
  serviciosAdicionales  Factura[]             @relation("ServiciosPorInternet")
  facturasEliminadas    FacturaEliminada[]
  cliente               ClienteInternet       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  creador               Usuario?              @relation("FacturaInternetCreador", fields: [creadorId], references: [id])
  empresa               Empresa               @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  facturacionZona       FacturacionZona?      @relation(fields: [facturacionZonaId], references: [id])
  pagos                 PagoFacturaInternet[]
  RecordatorioPago      RecordatorioPago[]
  rutasAsignadas        FacturaRuta[]

  @@unique([clienteId, facturacionZonaId, periodo])
}

model Factura {
  id                Int               @id @default(autoincrement())
  empresaId         Int
  clienteId         Int
  tipoFactura       TipoFactura
  montoTotal        Float
  saldoPendiente    Float             @default(0)
  fechaEmision      DateTime          @default(now())
  fechaVencimiento  DateTime?
  estado            EstadoFactura     @default(PENDIENTE)
  creadoEn          DateTime          @default(now())
  actualizadoEn     DateTime          @updatedAt
  facturaInternetId Int?
  cliente           ClienteInternet   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  empresa           Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  facturaInternet   FacturaInternet?  @relation("ServiciosPorInternet", fields: [facturaInternetId], references: [id])
  servicios         FacturaServicio[]
  pagos             PagoFactura[]
}

model FacturaServicio {
  id             Int      @id @default(autoincrement())
  facturaId      Int
  servicioId     Int
  cantidad       Int      @default(1)
  precioUnitario Float
  total          Float
  creadoEn       DateTime @default(now())
  actualizadoEn  DateTime @updatedAt
  factura        Factura  @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  servicio       Servicio @relation(fields: [servicioId], references: [id], onDelete: Cascade)
}

model PagoFacturaInternet {
  id                 Int                       @id @default(autoincrement())
  facturaInternetId  Int
  clienteId          Int
  montoPagado        Float
  metodoPago         MetodoPagoFacturaInternet
  origen             OrigenPago                @default(RUTA)
  fechaPago          DateTime                  @default(now())
  creadoEn           DateTime                  @default(now())
  cobradorId         Int?
  numeroBoleta       String?                   @unique
  codigoConfirmacion String?                   @unique

  // üîó NUEVO: de qu√© asignaci√≥n de ruta provino el cobro
  facturaRutaId Int?
  facturaRuta   FacturaRuta? @relation(fields: [facturaRutaId], references: [id])

  cliente         ClienteInternet @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  cobrador        Usuario?        @relation(fields: [cobradorId], references: [id])
  facturaInternet FacturaInternet @relation(fields: [facturaInternetId], references: [id], onDelete: Cascade)

  @@index([facturaRutaId])
  @@index([facturaInternetId, fechaPago])
}

model PagoFactura {
  id          Int             @id @default(autoincrement())
  facturaId   Int
  clienteId   Int
  montoPagado Float
  metodoPago  MetodoPago
  fechaPago   DateTime        @default(now())
  creadoEn    DateTime        @default(now())
  cliente     ClienteInternet @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  factura     Factura         @relation(fields: [facturaId], references: [id], onDelete: Cascade)
}

model RecordatorioPago {
  id                Int                       @id @default(autoincrement())
  clienteId         Int
  facturaInternetId Int
  tipo              String
  mensaje           String
  fechaEnviado      DateTime
  creadoEn          DateTime                  @default(now())
  actualizadoEn     DateTime                  @updatedAt
  resultado         ResultadoRecordatorioPago
  cliente           ClienteInternet           @relation(fields: [clienteId], references: [id])
  facturaInternet   FacturaInternet           @relation(fields: [facturaInternetId], references: [id], onDelete: Cascade)
}

model FacturaEliminada {
  id                Int              @id @default(autoincrement())
  facturaInternetId Int?
  periodo           String
  montoPago         Float
  fechaPagoEsperada DateTime
  clienteId         Int
  usuarioId         Int
  fechaEliminacion  DateTime         @default(now())
  motivo            String?
  facturaInternet   FacturaInternet? @relation(fields: [facturaInternetId], references: [id])
  usuario           Usuario          @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([facturaInternetId])
}

////////////////////////////////////////////////////////////////////////////////
// [07] üöö RUTAS DE COBRO (Asignaciones, Turnos y Cobros)
////////////////////////////////////////////////////////////////////////////////

model Ruta {
  id            Int               @id @default(autoincrement())
  nombreRuta    String
  cobradorId    Int?
  montoCobrado  Int               @default(0)
  estadoRuta    EstadoRuta        @default(ACTIVO)
  empresaId     Int
  observaciones String?
  actualizadoEn DateTime          @updatedAt
  creadoEn      DateTime          @default(now())
  cobrador      Usuario?          @relation(fields: [cobradorId], references: [id], onDelete: Cascade)
  empresa       Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  clientes      ClienteInternet[] @relation("ClienteInternetToRuta")
  // notaPrueba   String?  @db.VarChar(100) // <- campo temporal
  facturas      FacturaRuta[]
  cobros        CobroRuta[]       @relation("RutaToCobros")
  turnos        RutaTurno[]
}

model RutaTurno {
  id         Int             @id @default(autoincrement())
  rutaId     Int
  fecha      DateTime
  cobradorId Int?
  estado     EstadoRutaTurno @default(ABIERTA)
  aperturaEn DateTime        @default(now())
  cierreEn   DateTime?
  notas      String?

  totalAsignadas Int   @default(0)
  totalCobradas  Int   @default(0)
  sumaCobros     Float @default(0)

  ruta     Ruta     @relation(fields: [rutaId], references: [id], onDelete: Cascade)
  cobrador Usuario? @relation(fields: [cobradorId], references: [id])

  @@unique([rutaId, fecha])
  @@index([estado])
  // Recomendado para queries por cobrador:
  @@index([cobradorId])
}

model FacturaRuta {
  id            Int                  @id @default(autoincrement())
  rutaId        Int
  facturaId     Int
  asignadaEn    DateTime             @default(now())
  asignadaPorId Int?
  estado        EstadoAsignacionRuta @default(ASIGNADA)
  motivo        String? // p.ej., ‚Äúcliente ausente‚Äù, ‚Äúerror de zona‚Äù
  cobradaEn     DateTime?
  cobradaPorId  Int? // snapshot del cobrador que la cobr√≥
  observaciones String?

  ruta        Ruta                  @relation(fields: [rutaId], references: [id], onDelete: Cascade)
  factura     FacturaInternet       @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  asignadaPor Usuario?              @relation("AsignadorFacturaRuta", fields: [asignadaPorId], references: [id])
  cobradaPor  Usuario?              @relation("CobradorFacturaRuta", fields: [cobradaPorId], references: [id])
  pagos       PagoFacturaInternet[]

  @@unique([rutaId, facturaId]) // evita duplicados en la MISMA ruta
  @@index([facturaId, estado])
  @@index([rutaId, estado])
}

model CobroRuta {
  id            Int             @id @default(autoincrement())
  clienteId     Int
  rutaId        Int
  montoCobrado  Int
  estadoCobro   EstadoCobro
  fechaCobro    DateTime        @default(now())
  observaciones String?
  actualizadoEn DateTime        @updatedAt
  creadoEn      DateTime        @default(now())
  cliente       ClienteInternet @relation(fields: [clienteId], references: [id])
  ruta          Ruta            @relation("RutaToCobros", fields: [rutaId], references: [id])
}

////////////////////////////////////////////////////////////////////////////////
// [08] üõ†Ô∏è SOPORTE T√âCNICO, ASIGNACIONES Y METAS
////////////////////////////////////////////////////////////////////////////////

model TicketSoporte {
  id                     Int                    @id @default(autoincrement())
  clienteId              Int
  empresaId              Int
  tecnicoId              Int?
  creadoPorId            Int?
  estado                 EstadoTicketSoporte    @default(ABIERTA)
  prioridad              PrioridadTicketSoporte @default(MEDIA)
  titulo                 String?
  descripcion            String?
  fechaCierre            DateTime?
  fechaApertura          DateTime               @default(now())
  fechaAsignacion        DateTime?
  fechaInicioAtencion    DateTime?
  fechaResolucionTecnico DateTime?
  boleta                 BoletaSoporte?
  SeguimientoTicket      SeguimientoTicket[]
  etiquetas              TicketEtiqueta[]
  cliente                ClienteInternet        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  creadoPor              Usuario?               @relation("TicketCreador", fields: [creadoPorId], references: [id])
  empresa                Empresa                @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  tecnico                Usuario?               @relation("TicketTecnico", fields: [tecnicoId], references: [id])
  asignaciones           TicketSoporteTecnico[]
}

model BoletaSoporte {
  id            Int            @id @default(autoincrement())
  ticketId      Int?           @unique
  conforme      Boolean        @default(false)
  firmadoPor    String?
  observaciones String?
  fechaFirma    DateTime?
  generadoPorId Int?
  creadoEn      DateTime       @default(now())
  actualizadoEn DateTime       @updatedAt
  generadoPor   Usuario?       @relation(fields: [generadoPorId], references: [id])
  ticket        TicketSoporte? @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model EtiquetaTicket {
  id            Int              @id @default(autoincrement())
  nombre        String           @unique
  actualizadoEn DateTime?        @updatedAt
  creadoEn      DateTime?        @default(now())
  tickets       TicketEtiqueta[]
}

model TicketEtiqueta {
  id            Int            @id @default(autoincrement())
  ticketId      Int
  etiquetaId    Int
  actualizadoEn DateTime?      @updatedAt
  creadoEn      DateTime?      @default(now())
  etiqueta      EtiquetaTicket @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)
  ticket        TicketSoporte  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, etiquetaId])
}

model SeguimientoTicket {
  id            Int           @id @default(autoincrement())
  ticketId      Int
  usuarioId     Int
  descripcion   String
  fechaRegistro DateTime      @default(now())
  ticket        TicketSoporte @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  usuario       Usuario       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model TicketSoporteTecnico {
  id            Int           @id @default(autoincrement())
  ticketId      Int
  tecnicoId     Int
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
  tecnico       Usuario       @relation(fields: [tecnicoId], references: [id], onDelete: Cascade)
  ticket        TicketSoporte @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, tecnicoId])
  @@index([tecnicoId])
}

model MetaTecnicoTicket {
  id               Int              @id @default(autoincrement())
  tecnicoId        Int
  fechaInicio      DateTime         @default(now())
  fechaFin         DateTime
  metaTickets      Int
  ticketsResueltos Int              @default(0)
  cumplida         Boolean          @default(false)
  fechaCumplida    DateTime?
  titulo           String?
  estado           EstadoMetaTicket
  actualizadoEn    DateTime         @updatedAt
  creadoEn         DateTime         @default(now())
  tecnico          Usuario          @relation("MetaTecnicoRelation", fields: [tecnicoId], references: [id], onDelete: Cascade)

  @@index([tecnicoId, fechaInicio, fechaFin])
}

model MetaTickets {
  id               Int               @id @default(autoincrement())
  tituloMetaTicket String
  fechaInicio      DateTime          @default(now())
  fechaFin         DateTime?
  ticketsMeta      Int
  ticketsAvance    Int               @default(0)
  estado           EstadoMetaTickets @default(ACTIVO)
  usuarioId        Int?
  cumplida         Boolean           @default(false)
  fechaCompletada  DateTime?
  usuario          Usuario?          @relation(fields: [usuarioId], references: [id])
}

model Asistencia {
  id              Int       @id @default(autoincrement())
  usuarioId       Int
  fecha           DateTime
  horaEntrada     DateTime
  horaSalida      DateTime?
  minutosTarde    Int?
  trabajoCompleto Boolean   @default(false)
  creadoEn        DateTime? @default(now())
  actualizadoEn   DateTime  @updatedAt
  usuario         Usuario   @relation("UsuarioAsistencias", fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, fecha])
  @@index([usuarioId, fecha])
}

////////////////////////////////////////////////////////////////////////////////
// [09] üìö ENUMS (sin cambios, solo agrupados)
////////////////////////////////////////////////////////////////////////////////

enum OrigenPago {
  RUTA
  OFICINA
  TRANSFERENCIA
  EN_LINEA
}

enum EstadoAsignacionRuta {
  ASIGNADA
  EN_PROCESO
  COBRADA
  CANCELADA
  REASIGNADA
}

enum EstadoRutaTurno {
  ABIERTA
  EN_CURSO
  CERRADA
  ANULADA
}

enum TipoPlantilla {
  RECORDATORIO_1
  RECORDATORIO_2
  AVISO_PAGO
  SUSPENSION
  CORTE
  GENERACION_FACTURA
}

enum StateFacturaInternet {
  PENDIENTE
  PAGADA
  VENCIDA
  ANULADA
  PARCIAL
}

enum ResultadoRecordatorioPago {
  PENDIENTE
  PAGADO
  OTRO
}

enum EstadoCobro {
  COBRADO
  SIN_COBRAR
}

enum EstadoMetaTicket {
  CANCELADO
  ABIERTO
  FINALIZADO
  CERRADO
}

enum EstadoRuta {
  ACTIVO
  ASIGNADA
  CERRADO
  CANCELADO
  EN_CURSO
}

enum EstadoMetaTickets {
  ACTIVO
  CERRADO
  CANCELADO
}

enum EstadoCliente {
  ACTIVO
  MOROSO
  SUSPENDIDO
  DESINSTALADO
  PENDIENTE_ACTIVO
  PAGO_PENDIENTE
  ATRASADO
  EN_INSTALACION
}

enum EstadoServicio {
  ACTIVO
  INACTIVO
}

enum EstadoFacturaInternet {
  PENDIENTE
  PAGADA
  ATRASADA
  CANCELADA
}

enum EstadoTicketSoporte {
  NUEVO
  ABIERTA
  EN_PROCESO
  PENDIENTE
  PENDIENTE_CLIENTE
  PENDIENTE_TECNICO
  RESUELTA
  CANCELADA
  ARCHIVADA
  CERRADO
  PENDIENTE_REVISION
}

enum TipoFactura {
  INTERNET
  SERVICIO_ADICIONAL
}

enum PrioridadTicketSoporte {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

enum RolUsuario {
  TECNICO
  OFICINA
  ADMIN
  SUPER_ADMIN
  COBRADOR
}

enum EstadoClienteServicio {
  ACTIVO
  SUSPENDIDO
  CANCELADO
}

enum MetodoPago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
  PAYPAL
}

enum EstadoFactura {
  PENDIENTE
  PAGADA
  ATRASADA
  CANCELADA
}

enum MetodoPagoFacturaInternet {
  EFECTIVO
  TARJETA
  DEPOSITO
  PAYPAL
  PENDIENTE
  OTRO
}
